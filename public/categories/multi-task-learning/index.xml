<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multi-task learning on Yuan Meng</title>
    <link>http://localhost:1313/categories/multi-task-learning/</link>
    <description>Recent content in Multi-task learning on Yuan Meng</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>mycaptainmy@gmail.com (Yuan Meng)</managingEditor>
    <webMaster>mycaptainmy@gmail.com (Yuan Meng)</webMaster>
    <copyright>Yuan Meng</copyright>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/multi-task-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Annotated Multi-Task Ranker: An MMoE Code Example</title>
      <link>http://localhost:1313/posts/mtml/</link>
      <pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><author>mycaptainmy@gmail.com (Yuan Meng)</author>
      <guid>http://localhost:1313/posts/mtml/</guid>
      <description>&lt;p&gt;Natural Language Processing (NLP) has an abundance of intuitively explained tutorials with code, such as Andrej Kaparthy&amp;rsquo;s &lt;a href=&#34;https://karpathy.ai/zero-to-hero.html&#34;&gt;Neural Networks: Zero to Hero&lt;/a&gt;, the viral &lt;a href=&#34;https://jalammar.github.io/illustrated-transformer/&#34;&gt;The Illustrated Transformer&lt;/a&gt; and its successor &lt;a href=&#34;https://nlp.seas.harvard.edu/annotated-transformer/&#34;&gt;The Annotated Transformer&lt;/a&gt;, Umar Jamil&amp;rsquo;s YouTube &lt;a href=&#34;https://www.youtube.com/@umarjamilai&#34;&gt;series&lt;/a&gt; dissecting SOTA models and the companion &lt;a href=&#34;https://github.com/hkproj&#34;&gt;repo&lt;/a&gt;, among others.&lt;/p&gt;&#xA;&lt;p&gt;When it comes to Search/Ads/Recommendations (&amp;ldquo;搜广推&amp;rdquo;), however, intuitive explanations accompanied by code are rare. Company engineering blogs tend to focus on high-level system designs, and many top conference (e.g., KDD/RecSys/SIGIR) papers don&amp;rsquo;t share code. In this post, I explain the iconic Multi-gate Mixture-of-Experts (MMoE) paper (&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/3219819.3220007&#34;&gt;Ma et al., 2018&lt;/a&gt;) using implementation in the popular &lt;a href=&#34;https://github.com/shenweichen/DeepCTR-Torch&#34;&gt;DeepCTR-Torch&lt;/a&gt; repo, to teach myself and readers how the authors&amp;rsquo; blueprint translates into code.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
